Test cases for the ''matrix_mul'' function in ''100-matrix_mul'' module
=========================================

importing the fucntion from the module:
	  >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Checking regular result
================================
checking two matrixes of list of list int/floats:
	 >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	 [[13, 16]]

Matrixes type checking
========================
checking a int and a matrix of the right type:
	 >>> matrix_mul(2, [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 	   ...
	 TypeError: m_a must be a list

checking a matrix of the right type with one of the wrong type:
	 >>> matrix_mul([[1, 2], [3, 4]], [[], [5, 6]])
	 Traceback (most recent call last):
	 	   ...
	 ValueError: m_b can't be empty

Matrixes content checking
========================
checking a int and a matrix of the right type:
	 >>> matrix_mul([2, [5, 6]], [[1, 2], [3, 4]])
	 Traceback (most recent call last):
	 	   ...
	 TypeError: m_a must be a list of lists

checking a matrix of the right type with one of the wrong type:
	 >>> matrix_mul([[1, '2'], [3, 4]], [[4, 3], [5, 6]])
	 Traceback (most recent call last):
	 	   ...
	 TypeError: m_a should contain only integers or floats


Matrixes size checking
========================
checking a matrix of the right type with one of the wrong type:
	 >>> matrix_mul([[1, 2, 7], [3, 4, 8]], [[4, 3], [5, 6]])
	 Traceback (most recent call last):
	 	   ...
	 ValueError: m_a and m_b can't be multiplied

checking a matrix of the right type with one of the wrong type:
	 >>> matrix_mul([[1, 2], [3, 4, 8]], [[4, 3], [5, 6]])
	 Traceback (most recent call last):
	 	   ...
	 TypeError: each row of m_a must be of the same size
