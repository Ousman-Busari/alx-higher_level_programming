Test cases for the ''add_integer'' function in ''0-add_integer'' module
=========================================

importing the fucntion from the module:
	  >>> add_integer = __import__('0-add_integer').add_integer

Integers and right float value checks
================================
checking over positive and negative integers addition:
	 >>> [add_integer(i, 5) for i in range(-10, 15, 5)]
	 [-5, 0, 5, 10, 15]

checking two floats:
	 >>> add_integer(6.786, 8.90)
	 14

TypeErrors checking
======================
checking an int and a str:
	 >>> add_integer(5, 'zen')
	 Traceback (most recent call last):
	 	   ...
	 TypeError: b must be an integer

checking a list and an int:
	 >>> add_integer([2, 5], 4)
	 Traceback (most recent call last):
	 	   ...
	 TypeError: a must be an integer

Values Errors checking
========================
checking an int and a float('inf'):
	 >>> add_integer(9, float('inf'))
	 Traceback (most recent call last):
	 	   ...
	 OverflowError: cannot convert float infinity to integer

checking a float('nan') and int:
	 >>> add_integer(float('nan'), 67)
	 Traceback (most recent call last):
	 	   ...
	 ValueError: cannot convert float NaN to integer

checking number of arguments
=============================
checking no args:
	 >>> add_integer()
	 Traceback (most recent call last):
	 	   ...
	 TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

checking one args:
	 >>> add_integer(3)
	 Traceback (most recent call last):
	 	   ...
	 TypeError: add_integer() missing 1 required positional argument: 'b'

checking more than two argumnets:
	 >>> add_integer(3, 5, 6, 6, 7) #doctest: +ELLIPSIS
	 Traceback (most recent call last):
	 	    ...
	 TypeError: add_integer() takes 2 positional arguments but...
